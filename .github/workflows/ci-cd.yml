name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore src/NuGetServer/NuGetServer.csproj

      - name: Build application
        run: dotnet build src/NuGetServer/NuGetServer.csproj --configuration Release --no-restore

      - name: Run tests
        run: |
          if [ -d "tests" ] || [ -d "test" ]; then
            dotnet test --configuration Release --no-build --verbosity normal
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Publish application
        run: dotnet publish src/NuGetServer/NuGetServer.csproj --configuration Release --no-build --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-server-build
          path: ./publish
          retention-days: 7

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for container tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set container registry and image name
        run: |
          echo "CONTAINER_REGISTRY=${{ env.REGISTRY }}" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Build and push container using .NET SDK
        run: |
          cd src/NuGetServer
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, just build without pushing
            dotnet publish /t:PublishContainer \
              -p ContainerImageTag=pr-${{ github.event.number }}
          else
            # For main branch and tags, build and push with proper tagging
            # Get the main image name from metadata
            MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
            REPO_NAME=$(echo "$MAIN_TAG" | cut -d':' -f1)
            TAG_NAME=$(echo "$MAIN_TAG" | cut -d':' -f2)
            
            # Build and push with registry settings
            dotnet publish /t:PublishContainer \
              -p ContainerRegistry=${{ env.REGISTRY }} \
              -p ContainerRepository=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]') \
              -p ContainerImageTag=${TAG_NAME}
            
            # Tag additional versions
            echo "${{ steps.meta.outputs.tags }}" | tail -n +2 | while read -r additional_tag; do
              if [ -n "$additional_tag" ]; then
                ADDITIONAL_TAG_NAME=$(echo "$additional_tag" | cut -d':' -f2)
                docker tag ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]'):${TAG_NAME} ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]'):${ADDITIONAL_TAG_NAME}
                docker push ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]'):${ADDITIONAL_TAG_NAME}
              fi
            done
          fi

      - name: Output container image details
        if: github.event_name != 'pull_request'
        run: |
          echo "Container images pushed:"
          echo "${{ steps.meta.outputs.tags }}"
