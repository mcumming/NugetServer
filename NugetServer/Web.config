<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <appSettings>
    <!--
    Determines if an Api Key is required to push\delete packages from the server. 
    -->
    <add key="apiKey" value="" />

    <!--
    Set the value here to allow people to push/delete packages from the server.
    NOTE: This is a shared key (password) for all users.
    -->
    <add key="requireApiKey" value="true" />

    <!--
    Change the path to the packages folder. Default is ~/Packages.
    This can be a virtual or physical path.
    -->
    <add key="packagesPath" value="C:\Packages" />

    <!--
    Set allowOverrideExistingPackageOnPush to false if attempts to upload a package that already exists
    (same id and version) should fail.
    -->
    <add key="allowOverrideExistingPackageOnPush" value="false" />

    <!--
    Set enableDelisting to true to enable delist instead of delete as a result of a "nuget delete" command.
    - delete: package is deleted from the repository's local filesystem.
    - delist: 
      - "nuget delete": the "hidden" file attribute of the corresponding nupkg on the repository local filesystem is turned on instead of deleting the file.
      - "nuget list" skips delisted packages, i.e. those that have the hidden attribute set on their nupkg.
      - "nuget install packageid -version version" command will succeed for both listed and delisted packages.
        e.g. delisted packages can still be downloaded by clients that explicitly specify their version.
    -->
    <add key="enableDelisting" value="false" />

    <!--
    Set enableFrameworkFiltering to true to enable filtering packages by their supported frameworks during search.
    -->
    <add key="enableFrameworkFiltering" value="false" />

    <!--
    When running NuGet.Server in a NAT network, package URLs generated by the server may be returned with an internal IP address.
    This setting allows NuGet.Server to override the package URL with a different URL.
    Set this to the full URL to the Packages directory on your server, including http:// and terminating /.
    Example: http://myserver.com/nuget/Packages/
    -->
    <add key="packagesDriveUsedUrl" value="" />

    <!--
    Set ignoreSymbolsPackages to true to not allow packages with .symbols.nupkg extension to be pushed or to be stored.
    -->
    <add key="ignoreSymbolsPackages" value="false" />

    <!--
    Set enableFileSystemMonitoring to false to disable package file system monitoring.
    When disabled, the server will need to be restarted after a package is added or removed.
    -->
    <add key="enableFileSystemMonitoring" value="true" />

    <!--
    Set initialCacheRebuildAfterSeconds to control the delay before the initial package cache is rebuilt.
    The default is 15 seconds. Set to 0 to rebuild immediately.
    -->
    <add key="initialCacheRebuildAfterSeconds" value="15" />
  </appSettings>
  <system.web>
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" maxRequestLength="31457280" />
  </system.web>
  <system.webServer>
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="31457280" />
      </requestFiltering>
    </security>
    <modules runAllManagedModulesForAllRequests="true" />
    <staticContent>
      <mimeMap fileExtension=".nupkg" mimeType="application/zip" />
    </staticContent>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-13.0.0.0" newVersion="13.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
